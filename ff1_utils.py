def generate_character_map(start_hex=0x80):
    """Generate FF1 character mapping dictionary starting from given hex value"""
    characters = {}
    
    # Numbers 0-9
    for i, char in enumerate("0123456789"):
        characters[bytes([start_hex + i])] = char
    
    # Uppercase A-Z
    for i, char in enumerate("ABCDEFGHIJKLMNOPQRSTUVWXYZ"):
        characters[bytes([start_hex + 10 + i])] = char
    
    # Lowercase a-z
    for i, char in enumerate("abcdefghijklmnopqrstuvwxyz"):
        characters[bytes([start_hex + 36 + i])] = char
    
    # Special characters
    special_chars = ["'", ",", ".", " ", "-", "..", "!", "?"]
    for i, char in enumerate(special_chars):
        characters[bytes([start_hex + 62 + i])] = char

    characters[bytes([0x1a])] = "e "
    characters[bytes([0x1b])] = " t"
    characters[bytes([0x1c])] = "th"
    characters[bytes([0x1d])] = "he"
    characters[bytes([0x1e])] = "s "
    characters[bytes([0x1f])] = "in"
    characters[bytes([0x20])] = " a"
    characters[bytes([0x21])] = "t "
    characters[bytes([0x22])] = "an"
    characters[bytes([0x23])] = "re"
    characters[bytes([0x24])] = " s"
    characters[bytes([0x25])] = "er"
    characters[bytes([0x26])] = "ou"
    characters[bytes([0x27])] = "d "
    characters[bytes([0x28])] = "to"
    characters[bytes([0x29])] = "n "
    characters[bytes([0x2A])] = "ng"
    characters[bytes([0x2B])] = "ea"
    characters[bytes([0x2C])] = "es"
    characters[bytes([0x2D])] = " i"
    characters[bytes([0x2E])] = "o "
    characters[bytes([0x2F])] = "ar"
    characters[bytes([0x30])] = "is"
    characters[bytes([0x31])] = " b"
    characters[bytes([0x32])] = "ve"
    characters[bytes([0x33])] = " w"
    characters[bytes([0x34])] = "me"
    characters[bytes([0x35])] = "or"
    characters[bytes([0x36])] = " o"
    characters[bytes([0x37])] = "st"
    characters[bytes([0x38])] = " c"
    characters[bytes([0x39])] = "at"
    characters[bytes([0x3A])] = "en"
    characters[bytes([0x3B])] = "nd"
    characters[bytes([0x3C])] = "on"
    characters[bytes([0x3D])] = "hi"
    characters[bytes([0x3E])] = "se"
    characters[bytes([0x3F])] = "as"
    characters[bytes([0x40])] = "ed"
    characters[bytes([0x41])] = "ha"
    characters[bytes([0x42])] = " m"
    characters[bytes([0x43])] = " f"
    characters[bytes([0x44])] = "r "
    characters[bytes([0x45])] = "le"
    characters[bytes([0x46])] = "ow"
    characters[bytes([0x47])] = "g "
    characters[bytes([0x48])] = "ce"
    characters[bytes([0x49])] = "om"
    characters[bytes([0x4A])] = "GI"
    characters[bytes([0x4B])] = "y "
    characters[bytes([0x4C])] = "of"
    characters[bytes([0x4D])] = "ro"
    characters[bytes([0x4E])] = "ll"
    characters[bytes([0x4F])] = " p"
    characters[bytes([0x50])] = " y"
    characters[bytes([0x51])] = "ca"
    characters[bytes([0x52])] = "MA"
    characters[bytes([0x53])] = "te"
    characters[bytes([0x54])] = "f "
    characters[bytes([0x55])] = "ur"
    characters[bytes([0x56])] = "yo"
    characters[bytes([0x57])] = "ti"
    characters[bytes([0x58])] = "l "
    characters[bytes([0x59])] = " h"
    characters[bytes([0x5A])] = "ne"
    characters[bytes([0x5B])] = "it"
    characters[bytes([0x5C])] = "ri"
    characters[bytes([0x5D])] = "wa"
    characters[bytes([0x5E])] = "ac"
    characters[bytes([0x5F])] = "al"
    characters[bytes([0x60])] = "we"
    characters[bytes([0x61])] = "il"
    characters[bytes([0x62])] = "be"
    characters[bytes([0x63])] = "rs"
    characters[bytes([0x64])] = "u "
    characters[bytes([0x65])] = " l"
    characters[bytes([0x66])] = "ge"
    characters[bytes([0x67])] = " d"
    characters[bytes([0x68])] = "li"
    characters[bytes([0x69])] = ".."
    characters[bytes([0x6A])] = "ne"
    characters[bytes([0x6B])] = "it"
    characters[bytes([0x6C])] = "ri"
    characters[bytes([0x6D])] = "wa"
    characters[bytes([0x6E])] = "ac"
    characters[bytes([0x6F])] = "al"
    characters[bytes([0xC8])] = "ee"
    characters[bytes([0x7A])] = "/"
    characters[bytes([0xE0])] = "%"
    characters[bytes([0xFF])] = " "
    return characters